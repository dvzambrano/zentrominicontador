<?php

/**
 * TransactionTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TransactionTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object TransactionTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Transaction');
    }

    public static function formatData($array, $page, $count = false) {
        $rows = array();

        $pos = 0;
        foreach ($array as $row) {
            $rows[] = $row->toArray();

            $rows[$pos]['amount'] = '-';
            if ($row->getAmount() && $row->getAmount() > 0)
                $rows[$pos]['amount'] = $row->getAmount();

            $rows[$pos]['accountstr'] = '';
            $rows[$pos]['costcenterstr'] = '';
            if ($row->getAccount() && $row->getAccount()->getId() > 0) {
                $rows[$pos]['accountstr'] = $row->getAccount()->getFancyText();

                if ($row->getAccount()->getCostcenter() && $row->getAccount()->getCostcenter()->getId() > 0)
                    $rows[$pos]['costcenterstr'] = $row->getAccount()->getCostcenter()->getName();
            }


            $rows[$pos]['currencystr'] = '';
            if ($row->getCurrency() && $row->getCurrency()->getId() > 0)
                $rows[$pos]['currencystr'] = $row->getCurrency()->getCode();

            $rows[$pos]['umstr'] = '';
            if ($row->getUm() && $row->getUm()->getId() > 0)
                $rows[$pos]['umstr'] = $row->getUm()->getName();

            $rows[$pos]['elementstr'] = '';
            if ($row->getElement() && $row->getElement()->getId() > 0)
                $rows[$pos]['elementstr'] = $row->getElement()->getName();

            $rows[$pos]['creationdatestr'] = '';
            if ($row->getComprobant() && $row->getComprobant()->getId() > 0) {
                $date = date_create_from_format('Y-m-d H:i:s', $row->getComprobant()->getCreationdate());
                $rows[$pos]['creationdatestr'] = $date->format('m/d/Y H:i');
            }

            $rows[$pos]['balance'] = $row->getBalance();

            $pos++;
        }

        $rows = array(
            'metaData' => array(
                'idProperty' => 'code',
                'root' => 'data',
                'totalProperty' => 'results',
                'fields' => array(
                    array('name' => 'id', 'type' => 'int'),
                    array('name' => 'amount', 'type' => 'decimal'),
                    array('name' => 'debit', 'type' => 'decimal'),
                    array('name' => 'credit', 'type' => 'decimal'),
                    array('name' => 'creditave', 'type' => 'decimal'),
                    array('name' => 'balance', 'type' => 'decimal'),
                    array('name' => 'rate', 'type' => 'decimal'),
                    array('name' => 'comment', 'type' => 'string'),
                    array('name' => 'costcenter', 'type' => 'string'),
                    array('name' => 'accountstr', 'type' => 'string'),
                    array('name' => 'costcenterstr', 'type' => 'string'),
                    array('name' => 'currencystr', 'type' => 'string'),
                    array('name' => 'umstr', 'type' => 'string'),
                    array('name' => 'elementstr', 'type' => 'string'),
                    array('name' => 'creationdatestr', 'type' => 'date')
                ),
                'sortInfo' => array(
                    'field' => 'id',
                    'direction' => 'ASC'
                )
            ),
            'success' => true,
            'message' => 'app.msg.info.loadedsuccessful',
            'results' => $count,
            'data' => $rows,
            'page' => $page
        );
        return $rows;
    }

    const table = 'Transaction';
    const akfield = 'id';

    public static function getAllPaged($start, $limit, $query, $filters) {

        $table = self::table;

        $q = Doctrine_Core::getTable($table)->createQuery('t')
                ->leftJoin('t.Comprobant c')
                ->orderBy("t.id DESC");

        $pager = new sfDoctrinePager($table, $limit);

        if ($query && $query != '')
            $q = Doctrine_Query::create()
                    ->select('t.*')
                    ->from($table . ' t')
                    ->where('t.comment LIKE ?', '%' . $query . '%')
                    ->orderBy("t.id DESC");

        if ($filters) {
            $query = $q;
            $char = 't';
            foreach ($filters as $filter) {
                if ($filter->field == 'creationdate') {
                    $char = 'c';
                }
                else
                    $char = 't';
                switch ($filter->type) {
                    case 'string':
                        $query->addWhere($char . '.' . $filter->field . ' LIKE ?', '%' . $filter->value . '%');
                        break;
                    case 'date':
                        switch ($filter->comparison) {
                            case 'gt':
                                $filter->value = date_create_from_format('d/m/Y H:i:s', $filter->value . ' 00:00:00')->format('Y-m-d H:i:s');
                                $query->addWhere('DATE(' . $char . '.' . $filter->field . ') > ?', $filter->value);
                                break;
                            case 'get':
                                $filter->value = date_create_from_format('d/m/Y H:i:s', $filter->value . ' 00:00:00')->format('Y-m-d H:i:s');
                                $query->addWhere('DATE(' . $char . '.' . $filter->field . ') >= ?', $filter->value);
                                break;
                            case 'lt':
                                $filter->value = date_create_from_format('d/m/Y H:i:s', $filter->value . ' 23:59:59')->format('Y-m-d H:i:s');
                                $query->addWhere('DATE(' . $char . '.' . $filter->field . ') < ?', $filter->value);
                                break;
                            case 'let':
                                $filter->value = date_create_from_format('d/m/Y H:i:s', $filter->value . ' 23:59:59')->format('Y-m-d H:i:s');
                                $query->addWhere('DATE(' . $char . '.' . $filter->field . ') <= ?', $filter->value);
                                break;
                            default:
                                $query->addWhere('DATE(' . $char . '.' . $filter->field . ') = ?', $filter->value);
                                break;
                        }
                        break;
                    default:
                        switch ($filter->comparison) {
                            case 'gt':
                                $query->addWhere($char . '.' . $filter->field . ' > ?', $filter->value);
                                break;
                            case 'get':
                                $query->addWhere($char . '.' . $filter->field . ' >= ?', $filter->value);
                                break;
                            case 'lt':
                                $query->addWhere($char . '.' . $filter->field . ' < ?', $filter->value);
                                break;
                            case 'let':
                                $query->addWhere($char . '.' . $filter->field . ' <= ?', $filter->value);
                                break;
                            default:
                                $query->addWhere($char . '.' . $filter->field . ' = ?', $filter->value);
                                break;
                        }
                        break;
                }
            }
            $q = $query;
            //print_r($q->getSQLQuery());die;
        }

        $pager->setQuery($q);

        $page = $start ? $start / $limit + 1 : 1;
        $pager->setPage($page);

        $pager->init();

        return self::formatData($pager->getResults(), $page, $q->count());

//        $query = BaseTable::getAllPaged(self::table, $start, $limit, $query, $filters, false);
//        return self::formatData($query['results'], $query['page']);
    }

    public static function findByAK($ak) {
        return BaseTable::findByAK(self::table, self::akfield, $ak);
    }

    public static function getAll() {
        return self::formatData(BaseTable::getAll(self::table), 1);
    }

    public static function getAllByIds($ids, $fromdate = false, $todate = false) {
        $table = self::table;
        $q = Doctrine_Query::create()
                ->from($table . ' t')
                ->leftJoin('t.Comprobant c')
                ->where('t.accountid IN (' . implode(',', $ids) . ')');
        if ($fromdate && $fromdate != '')
            $q = $q->addWhere('DATE(c.creationdate) >= ?', $fromdate);
        if ($todate && $todate != '')
            $q = $q->addWhere('DATE(c.creationdate) <= ?', $todate);
        return $q->execute();
    }

    public static function deleteByPK($pks) {
        return BaseTable::deleteByPK(self::getInstance(), $pks);
    }

}