<?php

/**
 * Account
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    SGArqBase
 * @subpackage model
 * @author     MSc. Donel Vazquez Zambrano
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Account extends BaseAccount {

    const MULTIENTITY_PREFIX = 'ME{0}->';

    public function isUsed() {
        $result = $this->getTransactions()->count() > 0;

        $accounts = $this->getAccounts();
        foreach ($accounts as $account)
            $result = $result || $account->isUsed();

        return $result;
    }

    public function isVirtual() {
        return $this->getCostcenterid() > -1 || $this->getElementid() > -1;
    }

    public function getFancyText() {
        $text = $this->getPath();
        $text = str_replace('NULL', '', $text);
        $text = str_replace('/', '', $text);
        $text = $text . ': ' . $this->getName();

        return $text;
    }

    public function getBalance($fromdate = false, $todate = false, $recursive = false) {
        $balance = array(
            'debit' => 0,
            'credit' => 0,
            'balance' => 0
        );

        $accounts = $this->getAccounts();

        if (count($accounts) == 0) {
            $q = Doctrine_Query::create()
                    ->select('t.credit, t.debit, t.rate, t.accountid, t.currencyid, SUM(t.credit) as credittotal, SUM(t.debit) as debittotal')
                    ->from('Transaction t')
                    ->where('t.accountid = ?', array($this->getId()))
                    ->groupBy('t.currencyid');
            if ($fromdate || $todate) {
                $q = $q->leftJoin('t.Comprobant c');
                if ($fromdate)
                    $q = $q->addWhere('c.creationdate >= ?', $fromdate);
                if ($todate)
                    $q = $q->addWhere('c.creationdate <= ?', $todate);
            }

            $results = $q->execute()->toArray();
            foreach ($results as $result) {
                $balance['debit'] += $result['debittotal'] / $result['rate'];
                $balance['credit'] += $result['credittotal'] / $result['rate'];
                $balance['balance'] += ($result['credittotal'] - $result['debittotal']) / $result['rate'];
            }

            return $balance;
        }

        if ($recursive)
            foreach ($accounts as $account){
                $childbalance = $account->getBalance($fromdate, $todate, $recursive);
                
                $balance['debit'] += $childbalance['debit'];
                $balance['credit'] += $childbalance['credit'];
                $balance['balance'] += $childbalance['balance'];
            }

        return $balance;
    }

}